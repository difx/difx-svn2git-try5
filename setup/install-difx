#!/usr/bin/python
import os,sys
import getopt

def main():
    """
Install DiFX

Usage:
    install-difx [-fh] [--force] [--help] [--noinstall] [--reconf] [--g77] [--clean] [--norpfits]

Builds and installs mpifxcorr and associated tools.

By default install-difx will stop if any errors are encountered (e.g. if
something fails to build).

For the standard libraries and applications, install-difx will try to autoreconf
first. Only if this fails will the application be configured step by step.

Options:
-f --force         Carry on regardless of any errors (all failed commands will
                   be listed at the end.

-h --help          Display this help message and quit.

   --noinstall     Don't install, only build.

   --reconf        Don't run autoreconf but reconfigure step by step.

   --mk5daemon     Install mk5daemon (not installed by default)

   --g77           Use g77, rather than gfortran

   --norpfits      Don't build rpfits

   --clean         Run make clean for all components

    """
    pass

###############################################################################
# Parse command line options and arguments
# When adding an option or argument
#  * Make sure a default is set
#  * Make sure it is documented in main.__doc__
###############################################################################
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "fh", ["help", "force", "reconf", "noinstall", "mk5daemon", "g77", "clean", "norpfits"])
except getopt.GetoptError, err:
    print err
    print main.__doc__
    sys.exit(2)

if not 0 <= len(args) <= 0:
    print "Error: Wrong number of Arguments"
    print main.__doc__
    sys.exit(2)

# set defaults
force = False
reconf = False
noinstall = False
mk5d = False
gfortran = True
rpfits = True
doclean = False

# read arguments

# read options
if len(opts) > 0:
    for o, a in opts:
        if o in ("-h", "--help"):
            print main.__doc__
            sys.exit(2)
        if o in ("-f", "--force"):
            force = True
        if o == "--reconf":
            reconf = True
        if o == "--noinstall":
            noinstall = True
        if o == "--mk5daemon":
            mk5d = True
        if o == "--g77":
            gfortran = False
        if o == "--norpfits":
            rpfits = False
        if o == "--clean":
            doclean = True

###### Subroutine to run a command and raise error if  
###### command doesn't return 0.
if force:
    errors = []

def run(cmd):
    if os.system(cmd):
        if force:
            errors.append(os.getcwd() + ' ' + cmd + " failed.")
        else:
            raise RuntimeError, "Error running " + cmd + " in " + os.getcwd()

###### Subroutine to do the compiling of an auto-tool ###
def auto_compile(dolibtoolize, doautoheader, prefix):
    if reconf or os.system("autoreconf"):
        print "reconfiguring"
        run("aclocal")
        if dolibtoolize:
            run(LIBTOOLIZE+" --copy --force")
        run("autoconf")
        if doautoheader:
            run("autoheader")
        run("automake -a")
        run("./configure --prefix=" + difxroot)
    run("make")
    if not noinstall:
        run("make install")

###### Get all relevant environment variables ###########
print "************************************"
print "Getting environmental variables"
print
difxroot = os.environ.get('DIFXROOT')
if not difxroot:
    raise RuntimeError, "DIFXROOT must be defined"
bindir = difxroot + '/bin/'
libdir = difxroot + '/lib/'
pkgdir = difxroot + '/lib/pkg-config/'
incdir = difxroot + '/include/'
ipproot = os.environ.get('IPPROOT')
ipplib32 = os.environ.get('IPPLIB32')
ipplib64 = os.environ.get('IPPLIB64')
mpicxx = os.environ.get('MPICXX')
pgplotdir = os.environ.get('PGPLOTDIR')
difxbits = os.environ.get('DIFXBITS')
platform = sys.platform

##### Check that appropriate setup has been done ########
if os.environ.get('DIFX_VERSION') == "":
    print "You must have already source'd setup.bash/setup.csh!"
    print "DIFX_VERSION was undefined - aborting compilation"
    raise RuntimeError
difx_version = os.environ.get('DIFX_VERSION')

##### OSX Specific changes
if platform == "darwin":
    print "Using Darwin tools"
    LIBTOOLIZE = "glibtoolize"
    SHAREDPOSTFIX = "dylib"
else:
    LIBTOOLIZE = "libtoolize"
    SHAREDPOSTFIX = "so"

if gfortran:
    os.environ['USEGFORTRAN'] = 'yes'

if difx_version != "trunk":
  difx_version = "branches/" + difx_version 

###### Targets ##########################################

libtargets = [["difxio",     difx_version, True,True],
              ["difxmessage",difx_version, True,True],
              ["mark5access",difx_version, True,True]]

apptargets = [["calcserver", difx_version, True,False],
              ["difx2fits",  difx_version, False,True],
              ["vex2difx",   difx_version, True,True]]

if mk5d:
    apptargets.append(["mk5daemon", difx_version, False,True])

cortarget = difx_version

os.chdir("..")

if doclean:
    print "**** Cleaning vexlib"
    os.chdir("libraries/vex/trunk/vexlib")
    run("make clean")
    os.chdir("../../../../")
    if rpfits:
        print "**** Cleaning rpfits"
        if platform == "darwin":
            os.chdir("libraries/rpfits/trunk/darwin_x86")
        else:
            if difxbits == "32":
                os.chdir("libraries/rpfits/trunk/linux/")
            else:
                os.chdir("libraries/rpfits/trunk/linux64/")
        run("make clean")
        os.chdir("../../../..")
    os.chdir("libraries")
    thisdir = os.getcwd()
    for libtarget in libtargets:
        print "**** Cleaning "+libtarget[0]
        os.chdir(libtarget[0] + '/' + libtarget[1])
        run("make clean")
        os.chdir(thisdir)
    os.chdir("../")
    os.chdir("applications")
    thisdir = os.getcwd()
    for apptarget in apptargets:
        print "**** Cleaning "+apptarget[0]
        os.chdir(apptarget[0] + '/' + apptarget[1])
        run("make clean")
        os.chdir(thisdir)
    os.chdir("../")
    sys.exit(0)  # Clean exit


##### Make directories if required ######################
if not noinstall:
    print "************************************"
    print "Setting up directories"
    print
    if os.path.exists(difxroot):
        print difxroot + " already exists"

    if os.path.exists(bindir):
        print bindir + " already exists"
    else:
        os.mkdir(bindir)
    if os.path.exists(libdir):
        print libdir + " already exists"
    else:
        os.mkdir(libdir)
    if os.path.exists(pkgdir):
        print pkgdir + " already exists"
    else:
        os.mkdir(pkgdir)
    if os.path.exists(incdir):
        print incdir + " already exists"
    else:
        os.mkdir(incdir)

##### Compile non-standard libraries ####################
print "************************************"
print "Building vex"
print
os.chdir("libraries/vex/trunk/vexlib")
if platform == "darwin":
    run("make -f Makefile.osx")
else:
    run("make")
if not noinstall:
    run("mv -f libvex." + SHAREDPOSTFIX + " " + libdir)
    run("mv -f libvex.a " + libdir)
os.chdir("../vexperl")
run("perl Makefile.PL PREFIX=" + libdir)
run("make")
if not noinstall:
    run("make install")
os.chdir("../../../../")

print "************************************"
print "Building Astro Perl"
print
os.chdir("libraries/perl/trunk/Astro")
run("perl Makefile.PL PREFIX=" + libdir)
run("make")
if not noinstall:
    run("make install")
os.chdir("../../../../")

if rpfits:
    print "************************************"
    print "Building rpfits"
    print
    if platform == "darwin":
        os.chdir("libraries/rpfits/trunk/darwin_x86")
    else:
        if difxbits == "32":
            os.chdir("libraries/rpfits/trunk/linux/")
        else:
            os.chdir("libraries/rpfits/trunk/linux64/")
    run("make")
    if not noinstall:
        run("mv -f librpfits.a " + libdir)
    os.chdir("../../../..")
    if not noinstall:
        run("cp -f libraries/rpfits/trunk/code/RPFITS.h " + incdir)




##### Make standard (autotool'd) libraries ###############
os.chdir("libraries")
thisdir = os.getcwd()
print "DEBUG: Making in ",thisdir
for libtarget in libtargets:
    print "************************************"
    print "Building ", libtarget[0]
    print
    os.chdir(libtarget[0] + '/' + libtarget[1])
    auto_compile(libtarget[2], libtarget[3], difxroot)
    os.chdir(thisdir)
os.chdir("../")

##### Make standard (autotool'd) applications ############
os.chdir("applications")
thisdir = os.getcwd()
print "DEBUG: Making in ",thisdir
for apptarget in apptargets:
    print "************************************"
    print "Building ", apptarget[0]
    print
    os.chdir(apptarget[0] + '/' + apptarget[1])
    auto_compile(apptarget[2], apptarget[3], difxroot)
    os.chdir(thisdir)
os.chdir("../")

##### Make mpifxcorr #####################################
print "************************************"
print "Making mpifxcorr"
print

os.chdir("mpifxcorr/" + cortarget)

run("aclocal")
run("autoconf")
run("autoheader")
run("automake")
rpfitsopt = ''
if not rpfits:
    rpfitsopt = ' --without-rpfits '
run("./configure CXX=" + mpicxx + rpfitsopt + " --prefix=" + difxroot)
run("make")
if not noinstall:
    run("make install")
    run("cp -f src/*.h " + incdir)
os.chdir("../")

if (force and not errors == []):
    print "************************************"
    print "WARNING: Errors were encountered during installation"
    print
    for error in errors:
        print error
else:
    print "Done!"
