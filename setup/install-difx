#!/usr/bin/python
import os,sys
import getopt

# Set this to true if compiling within a master_tags checkout
#master_tag = True
master_tag = False

def main():
    """
Install DiFX

Usage:
    install-difx [-fh] [--force] [--help] [--noinstall] [--reconf] [--g77] [--clean] [--rpfits] [--perl] [--withmonitor] [--noipp] [--ipp]

Builds and installs mpifxcorr and associated tools.

By default install-difx will stop if any errors are encountered (e.g. if
something fails to build).

For the standard libraries and applications, install-difx will try to autoreconf
first. Only if this fails will the application be configured step by step.

Options:
-f --force         Carry on regardless of any errors (all failed commands will
                   be listed at the end.

-h --help          Display this help message and quit.

   --noinstall     Don't install, only build.

   --reconf        Don't run autoreconf but reconfigure step by step.

   --mk5daemon     Install mk5daemon (not installed by default)

   --g77           Use g77, rather than gfortran

   --rpfits        Build rpfits

   --withmonitor   Try to build the difx_monitor application (requires pgplot)

   --perl          Install some non-standard perl utilities (deprecated)

   --clean         Run make clean for all components

   --noipp         Don't try and install ipp package config file

   --ipp           Force installation of ipp package config file (default don't overwrite existing)

    """
    pass

###############################################################################
# Parse command line options and arguments
# When adding an option or argument
#  * Make sure a default is set
#  * Make sure it is documented in main.__doc__
###############################################################################
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "fh", ["help", "force", "reconf", "noinstall", "mk5daemon", "g77", "clean", "rpfits", "perl", "withmonitor", "noipp", "ipp"])
except getopt.GetoptError, err:
    print err
    print main.__doc__
    sys.exit(2)

if not 0 <= len(args) <= 0:
    print "Error: Wrong number of Arguments"
    print main.__doc__
    sys.exit(2)

# set defaults
force = False
reconf = False
noinstall = False
mk5d = False
gfortran = True
rpfits = False
perl = False
doclean = False
domonitor = False
doipp = 0

# read arguments

# read options
if len(opts) > 0:
    for o, a in opts:
        if o in ("-h", "--help"):
            print main.__doc__
            sys.exit(2)
        if o in ("-f", "--force"):
            force = True
        if o == "--reconf":
            reconf = True
        if o == "--noinstall":
            noinstall = True
        if o == "--mk5daemon":
            mk5d = True
        if o == "--g77":
            gfortran = False
        if o == "--perl":
            perl = True
        if o == "--rpfits":
            rpfits = True
        if o == "--withmonitor":
            domonitor = True
        if o == "--ipp":
            doipp = 1
        if o == "--noipp":
            doipp = -1
        if o == "--clean":
            doclean = True

###### Subroutine to run a command and raise error if  
###### command doesn't return 0.
if force:
    errors = []

def run(cmd):
    if os.system(cmd):
        if force:
            errors.append(os.getcwd() + ' ' + cmd + " failed.")
        else:
            raise RuntimeError, "Error running " + cmd + " in " + os.getcwd()

###### Subroutine to do the compiling of an auto-tool ###
def auto_compile(doreconf, dolibtoolize, doautoheader, prefix, dompicxx):
    if (doreconf and (reconf or os.system("autoreconf"))):
        print "reconfiguring"
        run("aclocal")
        if dolibtoolize:
            run(LIBTOOLIZE+" --copy --force")
        run("autoconf")
        if doautoheader:
            run("autoheader")
        run("automake -a")
        configstring = "./configure --prefix=" + prefix
        if dompicxx:
            configstring += " CXX=" + mpicxx
        run(configstring)
    run("make")
    if not noinstall:
        run("make install")

###### Get all relevant environment variables ###########
print "************************************"
print "Getting environmental variables"
print
difxroot = os.environ.get('DIFXROOT')
if not difxroot:
    raise RuntimeError, "DIFXROOT must be defined"
bindir = difxroot + '/bin/'
libdir = difxroot + '/lib/'
pkgdir = difxroot + '/lib/pkgconfig/'
incdir = difxroot + '/include/'
ipproot = os.environ.get('IPPROOT')
ipplib32 = os.environ.get('IPPLIB32')
ipplib64 = os.environ.get('IPPLIB64')
mpicxx = os.environ.get('MPICXX')
pgplotdir = os.environ.get('PGPLOTDIR')
difxbits = os.environ.get('DIFXBITS')
platform = sys.platform

##### Check that appropriate setup has been done ########
if not master_tag:
    if os.environ.get('DIFX_VERSION') == "":
        print "You must have already source'd setup.bash/setup.csh!"
        print "DIFX_VERSION was undefined - aborting compilation"
        raise RuntimeError
    difx_version = os.environ.get('DIFX_VERSION')
    if difx_version != "trunk":
        difx_version = "branches/" + difx_version
else:
    difx_version = ''

##### OSX Specific changes
if platform == "darwin":
    print "Using Darwin tools"
    LIBTOOLIZE = "glibtoolize"
    SHAREDPOSTFIX = "dylib"
else:
    LIBTOOLIZE = "libtoolize"
    SHAREDPOSTFIX = "so"

if gfortran:
    os.environ['USEGFORTRAN'] = 'yes'


###### Targets ##########################################

libtargets = [["difxio",     difx_version, True,True,True,False],
              ["difxmessage",difx_version, True,True,True,False],
              ["mark5access",difx_version, True,True,True,False]]

utiltargets = [["calcif2",   difx_version, True,False,True,False], 
               ["pulsar/difx2profile", difx_version, True,False,True,True],
               ["vis2screen",difx_version, True,False,False,True]]

apptargets = [["calcserver", difx_version, True,True,False,False],
              ["difx2fits",  difx_version, True,False,True,False],
              ["vex2difx",   difx_version, True,True,True,False],
              ["difx2mark4", difx_version, True,True,True,False],
              ["difxfilterbank", difx_version, True,False,False,True]]

if mk5d:
    apptargets.append(["mk5daemon", difx_version, True,False,True,False])
if domonitor:
    apptargets.append(["difx_monitor", difx_version, False,False,False,False])

startdir = os.getcwd()
if not master_tag:
    os.chdir("..")
topdir = os.getcwd()

if doclean:
    if perl:
        print "**** Cleaning vexlib"
        os.chdir("libraries/vex/"+difx_version+"/vexlib")
        run("make clean")
        os.chdir(topdir)
    if rpfits:
        print "**** Cleaning rpfits"
        if platform == "darwin":
            os.chdir("libraries/rpfits/"+difx_version+"/darwin_x86")
        else:
            if difxbits == "32":
                os.chdir("libraries/rpfits/"+difx_version+"/linux/")
            else:
                os.chdir("libraries/rpfits/"+difx_version+"/linux64/")
        run("make clean")
        os.chdir(topdir)

    os.chdir("libraries")
    thisdir = os.getcwd()
    for libtarget in libtargets:
        targetdir = libtarget[0] + '/' + libtarget[1]
        if os.path.exists(targetdir):
            print
            print "**** Cleaning "+targetdir
            os.chdir(targetdir)
            run("make clean")
        else:
            print
            print "**** Skipping "+targetdir
            print
        os.chdir(thisdir)

    os.chdir(topdir)
    os.chdir("applications")
    thisdir = os.getcwd()
    for apptarget in apptargets:
        targetdir = apptarget[0] + '/' + apptarget[1]
        if os.path.exists(targetdir):
            print
            print "**** Cleaning "+targetdir
            os.chdir(targetdir)
            run("make clean")
        else:
            print
            print "**** Skipping "+targetdir
            print
        os.chdir(thisdir)

    os.chdir(topdir)
    os.chdir("utilities")
    thisdir = os.getcwd()
    for utiltarget in utiltargets:
        targetdir = utiltarget[1] + '/' + utiltarget[0]
        if os.path.exists(targetdir):
            print
            print "**** Cleaning "+targetdir
            os.chdir(targetdir)
            run("make clean")
        else:
            print
            print "**** Skipping "+targetdir
            print
        os.chdir(thisdir)

    os.chdir(topdir)
    sys.exit(0)  # Clean exit


##### Make directories if required ######################
if not noinstall:
    print "************************************"
    print "Setting up directories"
    print

    if not os.path.exists(difxroot):
        os.mkdir(difxroot)
    if not os.path.exists(bindir):
        os.mkdir(bindir)
    if not os.path.exists(libdir):
        os.mkdir(libdir)
    if not os.path.exists(pkgdir):
        os.mkdir(pkgdir)
    if not os.path.exists(incdir):
        os.mkdir(incdir)

##### Install IPP package config file if appropriate  ###

    if doipp<0:
        print "************************************"
        print "Not installing IPP .pc file"
        print
    else:
        if os.path.exists(pkgdir+"/ipp.pc") and doipp==0:
            print "************************************"
            print pkgdir+" already exists"
            print
        else:
            print "************************************"
            print "Creating "+pkgdir+"ipp.pc"
            run(startdir+"/genipppc "+ipproot)
            run("mv ipp.pc "+pkgdir)
            print

##### Compile non-standard libraries ####################
if perl:
    print
    print "************************************"
    print "Building vex"
    print
    os.chdir("libraries/vex/"+difx_version+"/vexlib")
    if platform == "darwin":
        run("make -f Makefile.osx")
    else:
        run("make")
    if not noinstall:
        run("mv -f libvex." + SHAREDPOSTFIX + " " + libdir)
        run("mv -f libvex.a " + libdir)
    os.chdir("../vexperl")
    run("perl Makefile.PL PREFIX=" + difxroot)
    run("make")
    if not noinstall:
        run("make install")
    os.chdir(topdir)

    print
    print "************************************"
    print "Building Astro Perl"
    print
    os.chdir("libraries/perl/"+difx_version+"/Astro")
    run("perl Makefile.PL PREFIX="+difxroot)
    run("make")
    if not noinstall:
        run("make install")
        os.chdir(topdir)

if rpfits:
    print
    print "************************************"
    print "Building rpfits"
    print
    if platform == "darwin":
        os.chdir("libraries/rpfits/"+difx_version+"/darwin_x86")
    else:
        if difxbits == "32":
            os.chdir("libraries/rpfits/"+difx_version+"/linux/")
        else:
            os.chdir("libraries/rpfits/"+difx_version+"/linux64/")
    run("make")
    if not noinstall:
        run("mv -f librpfits.a " + libdir)
    os.chdir(topdir)
    if not noinstall:
        run("cp -f libraries/rpfits/"+difx_version+"/code/RPFITS.h " + incdir)

##### Make standard (autotool'd) libraries ###############
os.chdir("libraries")
thisdir = os.getcwd()
for libtarget in libtargets:
    targetdir = libtarget[0]  + '/' + libtarget[1] 
    if os.path.exists(targetdir):
        print
        print
        print "************************************"
        print "Building ", targetdir
        print
        os.chdir(targetdir)
        auto_compile(libtarget[2], libtarget[3], libtarget[4], difxroot, libtarget[5])
    else:
        print
        print "******* Skipping "+targetdir
        print
    os.chdir(thisdir)
os.chdir(topdir)

##### Make mpifxcorr #####################################
print
print "************************************"
print "Making mpifxcorr"
print

os.chdir("mpifxcorr/" + difx_version)

run("aclocal")
run("autoconf")
run("autoheader")
run("automake")
rpfitsopt = ''
if rpfits:
    rpfitsopt = ' --with-rpfits '
run("./configure CXX=" + mpicxx + rpfitsopt + " --prefix=" + difxroot)
run("make")
if not noinstall:
    run("make install")
    run("cp -f src/*.h " + incdir)
os.chdir(topdir)

##### Make standard (autotool'd) applications ############
os.chdir("applications")
thisdir = os.getcwd()
for apptarget in apptargets:
    targetdir = apptarget[0]  + '/' + apptarget[1] 
    if os.path.exists(targetdir):
        print
        print
        print "************************************"
        print "Building ", apptarget[0]
        print
        os.chdir(targetdir)
        auto_compile(apptarget[2], apptarget[3], apptarget[4], difxroot, apptarget[5])
    else:
        print
        print "******* Skipping "+targetdir
        print
    os.chdir(thisdir)
os.chdir(topdir)

##### Make standard (autotool'd) utilities ###############
os.chdir("utilities")
thisdir = os.getcwd()
for utiltarget in utiltargets:
    if (utiltarget[1] == ''):
        targetdir = utiltarget[0]
    else:
        targetdir= utiltarget[1]  + '/' + utiltarget[0]
    if os.path.exists(targetdir):
        print
        print
        print "************************************" 
        print "Building ", utiltarget[0]
        os.chdir(targetdir)
        auto_compile(utiltarget[2], utiltarget[3], utiltarget[4], difxroot, utiltarget[5])
    else:
        print
        print "******* Skipping "+targetdir
        print
    os.chdir(thisdir)
os.chdir(topdir)

if (force and not errors == []):
    print
    print
    print "************************************"
    print "WARNING: Errors were encountered during installation"
    print
    for error in errors:
        print error
else:
    print "Done!"
